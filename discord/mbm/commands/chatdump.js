const { ChatInputCommandInteraction, SlashCommandBuilder, EmbedBuilder, codeBlock, ActionRowBuilder, SlashCommandStringOption, SlashCommandNumberOption, SlashCommandIntegerOption, SlashCommandBooleanOption, AttachmentBuilder } = require("discord.js");

const config = require("../../../config.json");
const utils = require("../../../utils");

const HOUR_TO_MILLIS = 60 * 60 * 1000;

const command = {
    data: new SlashCommandBuilder()
        .setName("chatdump")
        .setDescription("Generates a Chat Dump based on specified parameters")
        .addStringOption(
            new SlashCommandStringOption()
                .setName("streamer")
                .setDescription("Search by streamer username")
                .setRequired(false)
                .setAutocomplete(true)
        )
        .addStringOption(
            new SlashCommandStringOption()
                .setName("chatter")
                .setDescription("Search by chatter username")
                .setRequired(false)
                .setAutocomplete(true)
        )
        .addNumberOption(
            new SlashCommandNumberOption()
                .setName("start")
                .setDescription("Relative start time for chat logs, in hours. Ex: 1 would search for anything less than 1 hour ago")
                .setRequired(false)
        )
        .addNumberOption(
            new SlashCommandNumberOption()
                .setName("end")
                .setDescription("Relative end time for chat logs, in hours. Ex: 1 would search for anything greater than 1 hour ago")
                .setRequired(false)
        )
        .addIntegerOption(
            new SlashCommandIntegerOption()
                .setName("limit")
                .setDescription("Maximum chat messages to be sent. Default/Maximum: 10,000/500,000")
                .setMinValue(1)
                .setMaxValue(500000)
                .setRequired(false)
        )
        .addBooleanOption(
            new SlashCommandBooleanOption()
                .setName("ephemeral")
                .setDescription("'True' if you only want the dump to be viewable by you. Default: True")
                .setRequired(false)
        )
        .setDefaultMemberPermissions(0)
        .setDMPermission(false),
    /**
     * Execution function for this command
     * @param {ChatInputCommandInteraction} interaction 
     */
    async execute(interaction) {
        let streamer = interaction.options.getString("streamer", false);
        let chatter = interaction.options.getString("chatter", false);
        let start = interaction.options.getNumber("start", false);
        let end = interaction.options.getNumber("end", false);
        let limit = interaction.options.getInteger("limit", false);
        let ephemeral = interaction.options.getBoolean("limit", false);

        if (ephemeral === undefined || ephemeral === null) ephemeral = true;
        if (!limit || limit < 1 || limit > 500000) limit = 10000;

        const query = {};

        if (streamer) {
            try {
                query.streamer = (await utils.Twitch.getUserByName(streamer))._id;
            } catch(err) {
                interaction.error("Invalid streamer: " + err);
            }
        }
        if (chatter) {
            try {
                query.chatter = (await utils.Twitch.getUserByName(chatter))._id;
            } catch(err) {
                interaction.error("Invalid chatter: " + err);
            }
        }

        await interaction.deferReply({ephemeral: ephemeral})
        
        if (start) {
            query.time_sent = {
                $gt: Date.now() - (start * HOUR_TO_MILLIS),
            };
        }
        if (end) {
            if (!query.time_sent) query.time_sent = {};
            query.time_sent.$lt = Date.now() - (end * HOUR_TO_MILLIS);
        }

        const chats = await utils.Schemas.TwitchChat.find(query)
                .sort({time_sent: -1})
                .populate("streamer")
                .populate("chatter")
                .limit(limit);

        let streamerColLength = 15;
        chats.forEach(chat => {
            streamerColLength = Math.max(streamerColLength, chat.streamer.login.length);
        });

        let stringChat = `----------- Generated by ${interaction.user.tag} [${interaction.user.id}] on ${new Date().toLocaleString()} -----------`;
        chats.forEach(chat => {
            stringChat += `\n#${chat.streamer.login}${" ".repeat(streamerColLength - chat.streamer.login.length)} [${utils.parseDate(chat.time_sent)}] ${chat.chatter.display_name}: ${chat.message}`;
        });

        const attachment = new AttachmentBuilder(Buffer.from(stringChat, "utf-8"), {name: "dump-" + Date.now() + ".txt", description: "Chat history!", content_type: "text/plain"});
        interaction.editReply({ephemeral: ephemeral, files: [attachment]})
    }
};

module.exports = command;
